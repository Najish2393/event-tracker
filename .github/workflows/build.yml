name: Build and Deploy to AWS ECR and EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Ensure ECR_REPOSITORY_URI secret holds the full URI (e.g., 123456789012.dkr.ecr.your-region.amazonaws.com/your-repo-name)
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
  # ECR_REPOSITORY_NAME is just the name part, used for clarity in some places but not for full Docker image refs
  ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_INTERNAL_PORT: 5000 # Internal port of your Flask app in the Dockerfile
  APP_EXTERNAL_PORT: 80   # External port exposed on the EC2 instance

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        run: |
          # Build the image with the full ECR URI and the unique Git SHA
          docker build -t ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }} .
          # Also tag with 'latest' for convenience, but deployments will use SHA
          docker tag ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }} ${{ env.ECR_REPOSITORY_URI }}:latest

      - name: Scan Docker image with Trivy and generate report
        uses: aquasecurity/trivy-action@master
        with:
          # Scan the uniquely tagged image
          image-ref: ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW

      - name: Upload Trivy scan report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report-${{ github.sha }}
          path: trivy-report.json

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          docker push ${{ env.ECR_REPOSITORY_URI }}:latest

      - name: Echo Build and Push Success
        run: |
          echo "--- Docker Image Built and Pushed to ECR Successfully ---"
          echo "Image pushed: ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "--- Starting Deployment to EC2 ---"
            # Authenticate Docker with ECR on the EC2 instance
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}
            echo "Pulling image: ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}"
            # Pull the specific image that was just built and pushed
            docker pull ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
            echo "Stopping and removing old container (if any)..."
            # Use the consistent container name 'event-tracker'
            docker stop event-tracker || true
            docker rm event-tracker || true
            echo "Running new container..."
            # Run the new container, mapping the external port to the internal Flask port
            docker run -d --name event-tracker -p ${{ env.APP_EXTERNAL_PORT }}:${{ env.APP_INTERNAL_PORT }} ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
            echo "Deployment complete! Service should be running on port ${{ env.APP_EXTERNAL_PORT }}."
            echo "Verify with: docker ps"
            echo "Check logs with: docker logs event-tracker"
            echo "--- Deployment to EC2 Finished Successfully! ---"
            echo "Service deployed to http://${{ env.EC2_HOST }}:${{ env.APP_EXTERNAL_PORT }}"

  test:
    name: Basic Service Test
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Wait for service to start
        run: |
          echo "Waiting 15 seconds for the service to start..."
          sleep 15

      - name: Test service endpoint
        run: |
          SERVICE_URL="http://${{ env.EC2_HOST }}:${{ env.APP_EXTERNAL_PORT }}/events"
          echo "Attempting to curl: $SERVICE_URL"
          curl_output=$(curl --fail --silent --show-error $SERVICE_URL)
          if [ $? -eq 0 ]; then
            echo "Service is reachable. Response: $curl_output"
            echo "Basic test passed!"
          else
            echo "Error: Service is not reachable or returned an error."
            exit 1
          fi
