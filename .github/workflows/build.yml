name: Build and Deploy to AWS ECR and EC2

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Scan Docker image and generate report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REPOSITORY:latest
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW

      - name: Upload Trivy scan report artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-report
          path: trivy-report.json

      - name: Push Docker image to ECR
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker stop event-tracker || true
            docker rm event-tracker || true
            docker run -d --name event-tracker -p 80:8000 $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Test deployed app
        run: |
          curl -s http://${{ env.EC2_HOST }}/events || echo "Service unavailable"
