name: Build and Deploy to AWS ECR and EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_FULL_IMAGE_URI: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_INTERNAL_PORT: 8000 # Matches Dockerfile EXPOSE and Gunicorn bind port
  APP_EXTERNAL_PORT: 80   # External port exposed on the EC2 instance

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        # This action will infer the registry from configured AWS credentials.

      - name: Build and tag Docker image
        run: |
          # Explicitly specify the Dockerfile using --file to avoid confusion with docker-compose.yml
          docker build -t ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }} --file Dockerfile .
          docker tag ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }} ${{ env.ECR_FULL_IMAGE_URI }}:latest

      - name: Scan Docker image with Trivy and generate report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW

      - name: Upload Trivy scan report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report-${{ github.sha }}
          path: trivy-report.json

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }}
          docker push ${{ env.ECR_FULL_IMAGE_URI }}:latest

      - name: Echo Build and Push Success
        run: |
          echo "--- Docker Image Built and Pushed to ECR Successfully ---"
          echo "Image pushed: ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production # Requires manual approval in GitHub UI if configured!

    steps:
      - name: Checkout code for Deployment
        uses: actions/checkout@v4 # Essential to make repository files available in this job

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          source: docker-compose.yml # Path relative to the repository root
          target: /home/${{ env.EC2_USER }}/ # Target directory on EC2 (ensure this path exists and is writable)

      - name: Deploy with Docker Compose via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "--- Starting Deployment with Docker Compose on EC2 ---"
            cd /home/${{ env.EC2_USER }}/
            
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_FULL_IMAGE_URI }}

            echo "Pulling latest image for Docker Compose..."
            docker compose pull

            echo "Stopping and removing old services (if any)..."
            docker compose down || true

            echo "Starting new services with Docker Compose..."
            docker compose up -d

            echo "Deployment complete! Services should be running."
            echo "Verify with: docker compose ps"
            echo "Service should be accessible at http://${{ env.EC2_HOST }}:${{ env.APP_EXTERNAL_PORT }}"
