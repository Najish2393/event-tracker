name: Build and Deploy to AWS ECR and EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_FULL_IMAGE_URI: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_INTERNAL_PORT: 5000 # Internal port of your Flask app in the Dockerfile
  APP_EXTERNAL_PORT: 80   # External port exposed on the EC2 instance

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        # The action should infer the registry from configured AWS credentials.

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }} .
          docker tag ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }} ${{ env.ECR_FULL_IMAGE_URI }}:latest

      - name: Scan Docker image with Trivy and generate report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW

      - name: Upload Trivy scan report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report-${{ github.sha }}
          path: trivy-report.json

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }}
          docker push ${{ env.ECR_FULL_IMAGE_URI }}:latest

      - name: Echo Build and Push Success
        run: |
          echo "--- Docker Image Built and Pushed to ECR Successfully ---"
          echo "Image pushed: ${{ env.ECR_FULL_IMAGE_URI }}:${{ github.sha }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code for Deployment
        uses: actions/checkout@v4 # This ensures your repository files are available in the deploy job

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          source: docker-compose.yml # Assumes docker-compose.yml is in the root of your repo
          target: /home/${{ env.EC2_USER }}/ # Target directory on EC2
          # Ensure this path exists and is writable by EC2_USER

      - name: Deploy with Docker Compose via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "--- Starting Deployment with Docker Compose on EC2 ---"
            # Navigate to the directory where docker-compose.yml was copied
            cd /home/${{ env.EC2_USER }}/ # Adjust if you copied to a different target

            # Authenticate Docker with ECR on the EC2 instance
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            echo "Pulling latest image for Docker Compose..."
            # Pull the latest image as defined in docker-compose.yml
            # Ensure your docker-compose.yml uses the correct image tag (e.g., :latest)
            docker compose pull

            echo "Stopping and removing old services (if any)..."
            # Stop and remove existing services defined in docker-compose.yml
            docker compose down || true

            echo "Starting new services with Docker Compose..."
            # Start services in detached mode
            docker compose up -d

            echo "Deployment complete! Services should be running."
            echo "Verify with: docker compose ps"
            echo "Check logs with: docker compose logs"
            echo "--- Deployment with Docker Compose Finished Successfully! ---"
            echo "Service should be accessible at http://${{ env.EC2_HOST }}:${{ env.APP_EXTERNAL_PORT }}"
